// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

namespace Persistence.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20260420000000_AddClinicsTables")]
    partial class AddClinicsTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.ClinicEntities.Clinic", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<DateTime>("CreatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("GETUTCDATE()");

                b.Property<string>("ClinicName")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<double>("Rating")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("float")
                    .HasDefaultValue(0.0);

                b.Property<int>("Status")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasDefaultValue(0);

                b.Property<DateTime?>("UpdatedAt")
                    .HasColumnType("datetime2");

                b.Property<string>("OwnerId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("OwnerId");

                b.ToTable("Clinics");
                
                b.OwnsOne("Domain.Entities.ClinicEntities.ClinicAddress", "Address", b1 =>
                {
                    b1.Property<int>("ClinicId")
                        .HasColumnType("int");
                        
                    b1.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");
                        
                    b1.Property<string>("Street")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");
                        
                    b1.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");
                        
                    b1.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");
                        
                    b1.HasKey("ClinicId");
                    
                    b1.ToTable("Clinics");
                    
                    b1.WithOwner()
                        .HasForeignKey("ClinicId");
                });
            });

            modelBuilder.Entity("Domain.Entities.ClinicEntities.Clinic", b =>
            {
                b.HasOne("Domain.Entities.SecurityEntities.User", "Owner")
                    .WithMany()
                    .HasForeignKey("OwnerId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();
            });
#pragma warning restore 612, 618
        }
    }
} 